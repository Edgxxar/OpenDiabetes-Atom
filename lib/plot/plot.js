'use babel';

/** @jsx etch.dom */

import etch from 'etch';
import path from 'path';
import fs from 'fs-extra';
import md5 from 'md5-file/promise';
import util from '../util';
import Toolbar from "./toolbar";
import Canvas from "./canvas";

/**
 * Plot has a directory that is watched for file changes.
 * Plots in the directory can be generated by tag, or with a file directly.
 */
export default class Plot {
  /**
   * Current status of this plot. Either idle, export or generate
   */
  status = 'idle';
  /**
   * The process currently generating plots, if in status generate
   */
  process = null;

  constructor(properties) {
    this.view = properties.view;
    this.serialized = properties.serialized;
    etch.initialize(this);
  }

  render() {
    const toolbar = this.serialized ? this.serialized.toolbar : null;
    const canvas = this.serialized ? this.serialized.canvas : null;
    return (
      <div className="odf-plot">
        <Toolbar ref="toolbar" serialized={toolbar} plot={this}/>
        <Canvas ref="canvas" serialized={canvas}/>
      </div>
    );
  }

  setCanvas(url) {
    if (url) {
      this.refs.canvas.renderPdf(url);
    } else {
      this.refs.canvas.clearPdf();
    }
  }

  /**
   * Exports data for the given tag and generates plot for the exported file.
   * @param tag
   */
  generatePlots(tag) {
    if (this.status !== 'idle') {
      throw new Error(`Cannot export tag while in status ${this.status}!`);
    }
    this.status = 'export';

    const toolbar = this.refs.toolbar;
    toolbar.updateProgress(-1, 'Exporting data...');

    // export
    let xprt;
    if (tag) {
      xprt = util.executeCli('exporttagged', {
        type: 'ODV_CSV',
        tag: tag
      }, false);
    } else {
      xprt = util.executeCli('export', {
        type: 'ODV_CSV'
      }, false);
    }
    // after export grep exported file
    xprt.then(result => {
      let file = result.match(/Export to file: (.+\.csv)/);
      if (!Array.isArray(file) || file.length < 2) {
        atom.notifications.addError('Export unsuccessful!', {
          detail: result
        });
        this.status = 'idle';
        return;
      }
      file = path.join(util.getProjectPath(), 'export', file[1]);

      // generate hash for file
      md5(file)
        .then(hash => {
          this.setTagCache(tag, hash);
          // generate directory
          if (this.status === 'export') {
            const dir = path.join(util.getProjectPath(), 'plots', hash);
            return fs.mkdirs(dir).then(() => Promise.resolve(dir));
          } else return Promise.reject('SIGTERM');
        })
        .then(dir => {
          // generate plots
          if (this.status === 'export') {
            this.status = 'generate';
            toolbar.watchFiles(dir);

            return util.spawnPlot('plot', {
              file: file,
              out: dir
            }, prc => {
              if (this.status === 'generate') {
                this.process = prc
              } else {
                prc.kill();
              }
            }, chunk => console.log(chunk.toString('utf8')), chunk => console.error(chunk.toString('utf8')));
          } else return Promise.reject('SIGTERM');
        })
        .then((code, signal) => {
          console.log(`plot finished with code ${code} and signal ${signal}`);
          toolbar.stopProgress();
          this.status = 'idle';
          this.process = null;
        })
        .catch(err => {
          if (err !== 'SIGTERM') {  // if not cancelled
            console.error(err);
            atom.notifications.addError('Error while generating plots!', {
              detail: err
            });
          }
          toolbar.stopProgress();
          this.status = 'idle';
          this.process = null;
        })
    });
  }

  cancelPlots() {
    if (this.status === 'idle')
      throw new Error(`Cannot cancel plot generation while in status ${this.status}!`);

    if (this.process !== null && typeof this.process === 'object')
      this.process.kill();
    this.status = 'idle';
    this.process = null;
  }

  hasTagCached(tag) {
    if (tag === null)
      tag = '__ALL';
    return this.view.tagCache.hasOwnProperty(tag);
  }

  getTagCache(tag) {
    if (tag === null)
      tag = '__ALL';
    return this.view.tagCache[tag];
  }

  setTagCache(tag, hash) {
    if (tag === null)
      tag = '__ALL';
    this.view.tagCache[tag] = hash;
  }

  getTag() {
    return this.refs.toolbar.getTag();
  }

  serialize() {
    return {
      toolbar: this.refs.toolbar.serialize(),
      canvas: this.refs.canvas.serialize()
    };
  }

  destroy() {
    etch.destroy(this);
  }

  update() {
    etch.update(this);
  }
}
