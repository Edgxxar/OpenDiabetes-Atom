'use babel';

/** @jsx etch.dom */

import etch from 'etch';
import cp from 'child_process';
import path from 'path';
import slash from 'slash';
import fs from 'fs-extra';
import md5 from 'md5-file/promise';
import util from '../util';
import Toolbar from "./toolbar";
import Canvas from "./canvas";
import {Writable} from 'stream';
import {StringDecoder} from 'string_decoder';

/**
 * Plot has a directory that is watched for file changes.
 * Plots in the directory can be generated by tag, or with a file directly.
 */
export default class Plot {
  /**
   * Current status of this plot. Either idle, export or generate
   */
  status = 'idle';
  /**
   * The process currently generating plots, if in status generate
   */
  process = null;

  constructor(properties) {
    this.view = properties.view;
    this.serialized = properties.serialized;
    etch.initialize(this);
  }

  render() {
    const toolbar = this.serialized ? this.serialized.toolbar : null;
    const canvas = this.serialized ? this.serialized.canvas : null;
    return (
      <div className="odf-plot">
        <Toolbar ref="toolbar" serialized={toolbar} plot={this}/>
        <Canvas ref="canvas" serialized={canvas}/>
      </div>
    );
  }

  setCanvas(url) {
    if (url) {
      this.refs.canvas.renderPdf(url);
    } else {
      this.refs.canvas.clearPdf();
    }
  }

  /**
   * Exports data for the given tag and generates plot for the exported file.
   * @param tag
   */
  generatePlots(tag) {
    if (this.status !== 'idle') {
      throw new Error(`Cannot export tag while in status ${this.status}!`);
    }
    const toolbar = this.refs.toolbar;
    this.status = 'export';

    toolbar.updateProgress(-1, 'Exporting data...');

    // export
    let xprt;
    if (tag) {
      xprt = util.executeCli('exporttagged', {
        type: 'ODV_CSV',
        tag: tag
      });
    } else {
      xprt = util.executeCli('export', {
        type: 'ODV_CSV'
      });
    }
    // after export grep exported file
    xprt.then(result => {
      let file = result.match(/Export to file: (.+\.csv)/);
      if (!Array.isArray(file) || file.length < 2) {
        atom.notifications.addError('Export unsuccessful!', {
          detail: result
        });
        this.status = 'idle';
        return;
      }
      file = path.join(util.getProjectPath(), 'export', file[1]);

      // generate hash for file
      md5(file)
        .then(hash => {
          this.setTagCache(tag, hash);
          // generate directory
          if (this.status === 'export') {
            const dir = path.join(util.getProjectPath(), 'plots', hash);
            return fs.mkdirs(dir).then(() => Promise.resolve(dir));
          } else return Promise.reject('SIGTERM');
        })
        .then(dir => {
          // generate plots
          if (this.status === 'export') {
            this.status = 'generate';
            toolbar.watchFiles(dir);

            if (atom.config.get('open-diabetes-filter.docker')) {
              // execute with docker
              const cmd = util.buildCommand('plot', {
                plot: '/tmp/plotteria/plot.py',
                config: '/tmp/plotteria/config.ini',
                // construct container path to file
                file: path.posix.join('/mnt/project', slash(util.getRelativeProjectPath(file))),
                // construct container path to output directory
                out: path.posix.join('/mnt/project', slash(util.getRelativeProjectPath(dir)))
              });

              console.debug(`Executing command on docker: ${cmd}`);
              return new Promise((resolve, reject) => {
                const docker = util.getDocker();
                docker.run('plotteria', util.splitCommandArgs(cmd), [new MyWritable(), new MyWritable()], {
                  Tty: false,
                  HostConfig: {
                    Binds: [
                      util.getProjectPath() + ':/mnt/project'
                    ],
                    AutoRemove: atom.config.get('open-diabetes-filter.docker-cleanup')
                  }
                }, {}, (err, data, container) => {
                  if (this.status === 'generate') {
                    // if status is still generate this was a crash, otherwise the process was cancelled
                    if (data && data.StatusCode === 0)
                      resolve();
                    else reject(data ? data.StatusCode : err);
                  } else reject('SIGTERM');
                }).on('container', container => {
                  if (this.status === 'generate') {
                    toolbar.updateProgress(-1, 'Generating plots...');
                    this.process = container;
                  } else {
                    container.kill().then(() => reject('SIGTERM'))
                  }
                });
              });

            } else {
              // execute on system
              const cmd = util.buildCommand('plot', {
                plot: atom.config.get('open-diabetes-filter.plot'),
                // construct path to config file
                config: path.resolve(util.getModulePath(), '..', 'docker', 'plotteria', 'config.ini'),
                file: file,
                out: dir
              });

              console.debug(`Spawning child process: ${cmd}`);
              return new Promise((resolve, reject) => {
                let args = util.splitCommandArgs(cmd);
                const exec = args.shift();
                args = Object.freeze(args);
                const process = cp.spawn(exec, args, {
                  cwd: util.getProjectPath(),
                  windowsHide: true
                });
                this.process = process;
                process.on('close', (code, signal) => {
                  if (this.status === 'generate') {
                    // if status is still generate this was a crash, otherwise the process was cancelled
                    if (code === 0)
                      resolve();
                    else reject(code);
                  } else reject('SIGTERM');
                });
              });
            }
          } else return Promise.reject('SIGTERM');
        })
        // after plot generation
        .then(() => {
          toolbar.stopProgress();
          this.status = 'idle';
          this.process = null;
        })
        .catch(err => {
          if (err !== 'SIGTERM') {  // if not cancelled
            console.error(err);
            atom.notifications.addError('Error while generating plots!', {
              detail: err
            });
          }
          toolbar.stopProgress();
          this.status = 'idle';
          this.process = null;
        })
    });
  }

  cancelPlots() {
    if (this.status === 'idle')
      throw new Error(`Cannot cancel plot generation while in status ${this.status}!`);

    if (this.process !== null && typeof this.process === 'object')
      this.process.kill();
    this.status = 'idle';
    this.process = null;
  }

  hasTagCached(tag) {
    if (tag === null)
      tag = '__ALL';
    return this.view.tagCache.hasOwnProperty(tag);
  }

  getTagCache(tag) {
    if (tag === null)
      tag = '__ALL';
    return this.view.tagCache[tag];
  }

  setTagCache(tag, hash) {
    if (tag === null)
      tag = '__ALL';
    this.view.tagCache[tag] = hash;
  }

  getTag() {
    return this.refs.toolbar.getTag();
  }

  serialize() {
    return {
      toolbar: this.refs.toolbar.serialize(),
      canvas: this.refs.canvas.serialize()
    };
  }

  destroy() {
    etch.destroy(this);
  }

  update() {
    etch.update(this);
  }
}

class MyWritable extends Writable {
  constructor(options) {
    super(options);
    const state = this._writableState;
    this._decoder = new StringDecoder(state.defaultEncoding);
    this.data = '';
  }

  _write(chunk, encoding, callback) {
    if (encoding === 'buffer') {
      chunk = this._decoder.write(chunk);
    }
    this.data += chunk;
    callback();
  }

  _final(callback) {
    this.data += this._decoder.end();
    console.log(this.data);
    callback();
  }
}
